{"name":"Fly","tagline":"Yet another esoteric language","body":"# Fly Programming Language\r\n\r\nFly Programming Language is an esoteric programming language where programs look like flight schedules.\r\n\r\n## Basic Syntax\r\n\r\nA program consists of several lines, where each line represents one instruction. The line below is from the very basic example of Hello World program.\r\n\r\n    06:30 OZ562 From Rome\r\n\r\nA line consists of four parts, separated by space character. The first part is time (or label), used for branching. The second part is flight number, which represents what operation should be done with this line. The third part is an indicator which shows the direction of the operation, and the last part is the name of the city which denotes the index of the variable.\r\n\r\n## Operation List\r\n\r\nCurrently, there are six operations defined. Each operation is distinguished by the first letter of the flight number.\r\n\r\n* Assignment\r\n\r\nAssignment operation stores the integer value of the flight number. For example, the line below\r\n\r\n    00:00 AA123 To New York\r\n\r\nassigns the value 123 to New York.\r\n\r\n* Input\r\n\r\nInput operation stores the input. The type of the input is decided by the parity of the flight number, where odd value is for integer and even value is for character. For example, the line below\r\n\r\n    01:00 IB031 To Madrid\r\n\r\ngets the integral input and stores its value to Madrid.\r\n\r\n* Output\r\n\r\nOutput operation prints the output. If the flight number is odd, the integral value itself is printed. Otherwise, the character corresponding the value is printed. For example, the line below\r\n\r\n    02:00 OZ101 From Seoul\r\n\r\nprints the integral value of Seoul.\r\n\r\n* Push/Pop\r\n\r\nPush/Pop operation deals with the stack. The type of the operation is decided by the indicator, where 'From' represents push operation and 'To' represents pop operation. For example, the lines below\r\n\r\n    03:00 PA102 From Los Angeles\r\n    03:10 PA103 To San Francisco\r\n\r\ncopy the value of Los Angeles to San Francisco.\r\n\r\n* Calculate\r\n\r\nCalculate operation performs binary operation with the stack values. The type of the operation is determined by the remainder of the flight number divided by 5. The remainder value of 0, 1, 2, 3, and 4 represents Addition, subtraction, multiplication, division, and modulo operation, respectively. For example, the lines below\r\n\r\n    04:00 PA201 From London\r\n    04:10 PA202 From Paris\r\n    04:20 CA339 To Rome\r\n\r\nstore the remainder of London divided by Paris to Rome.\r\n\r\n* Branch\r\n\r\nBranch operation moves the pointer of the program conditionally. If the popped value from the stack is greater than 0, the program pointer moves to the line indicated by the flight number. For example, the line below\r\n\r\n    05:00 BA200 From London\r\n\r\nmoves the pointer to the line with \"02:00\" if the popped value is greater than 0.\r\n\r\nThe lines where the flight number begins with characters not mentioned above are ignored.\r\n\r\n## Example Program\r\n\r\nThe program shown below calculates the sum of two integer inputs.\r\n\r\n    00:00 IB103 To Madrid\r\n    00:30 IB107 To Frankfurt\r\n    01:00 PA113 From Madrid\r\n    01:30 PA115 From Frankfurt\r\n    01:40 CA330 To Seoul\r\n    02:00 OZ501 From Seoul\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}